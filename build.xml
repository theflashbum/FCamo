<?xml version="1.0"?>
<project name="FlashCamouflage3" basedir="." default="compile-swc">
    <!-- This is 60% ripped off from RobotLegs - http://github.com/darscan/robotlegs-bluelego.
I am working on making my own but this one is so damn good I couldn't help myself. -->

    <!-- identify properties file -->
    <property file="build.properties"/>

    <!-- Set up FlexUnit Ant tasks -->
    <taskdef resource="flexUnitTasks.tasks" classpath="build/libs-flexunit/flexUnitTasks.jar"/>

    <target name="usage">
        <echo message=""/>
        <echo message="${project.name} Build Usage"/>
        <echo message="-----------------------------------"/>
        <echo message="Main targets are:"/>
        <echo message="compile-swc   --> Build ${project.name} SWC, asdoc, test"/>
        <echo message=""/>
        <echo message="Additonal targets are:"/>
        <echo message="asdoc         --> Build ${project.name} test and generate asdocs"/>
        <echo message="test          --> Build ${project.name} runs unit tests"/>
        <echo message="clean         --> Remove all folders created by build script"/>
        <echo message="init          --> Clean and create build folders"/>
        <echo message="-----------------------------------"/>
        <echo message="disconnect    --> Removed git files from project"/>
    </target>

    <!-- Deletes .git folder and .gitignore file -->
    <target name="disconnect">
        <delete dir="${basedir}/.git"/>
        <delete file="${basedir}/.gitignore"/>
    </target>

    <!-- Clean Build and Report files -->
    <target name="clean">
        <!-- Remove all directories created during the build process -->
        <echo>[clean] Removing Build and Report directories</echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${report.loc}" defaultexcludes="false">
                <include name="**/*"/>
            </fileset>
        </delete>
        <echo>[clean] Build and Report directories removed</echo>
    </target>

    <!-- Create directories needed for the build process -->
    <target name="init" depends="clean">
        <echo>[init] Creating Bin and Report directories</echo>
        <mkdir dir="${bin.loc}"/>

        <echo>[init] Bin and Report directories created</echo>
    </target>

    <!-- Run Unit Tests -->
    <target name="test" depends="init" if="run.test">
        <echo>[test] Running Unit Tests</echo>
        <!-- Compile TestRunner.mxml as a SWF -->

        <mkdir dir="${report.loc}"/>

        <java jar="${FLEX_HOME}/lib/mxmlc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <arg value="${test.src.loc}/${project.name}TestApp.mxml"/>
            <arg value="-source-path=${main.src.loc}"/>

            <arg value="-output=${bin.loc}/TestRunner.swf"/>
            <arg value="-default-size=148,148"/>
            <arg value="-default-background-color=0x320401"/>

            <!-- Include classes from SWCs in this folder, but only the ones we use. -->
            <arg value="-library-path+=${lib.loc}"/>

            <!-- So true. -->
            <arg value="-incremental=true"/>
            <arg value="-verbose-stacktraces=true"/>
            <arg value="-headless-server=true"/>
        </java>

        <!-- Execute TestRunner.swf as FlexUnit tests and publish reports -->
        <flexunit swf="bin/TestRunner.swf" toDir="${report.loc}" haltonfailure="false" verbose="true"
                  localTrusted="true" failureproperty="flexunit.failed"/>
        <!-- Generate readable JUnit-style reports -->
        <junitreport todir="${report.loc}">
            <fileset dir="${report.loc}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${report.loc}/html"/>
        </junitreport>

        <echo>[test] Finished running Unit Tests</echo>
    </target>

    <!-- Opens JUnit Report when test fails -->
    <target name="junitreport" depends="test" if="flexunit.failed">
        <exec executable="open">
            <arg line="-a ${browser} ${report.url}"/>
        </exec>
        <fail>Unit Tests Failed</fail>
    </target>

    <!-- Build Documentation -->
    <target name="asdoc" depends="junitreport" if="run.asdoc">
        <echo>[create-docs] Generating ASDOC documentation</echo>
        <tstamp>
            <format property="docgen.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
        </tstamp>

        <java jar="${FLEX_HOME}/lib/asdoc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <arg line="-external-library-path ${lib.loc}"/>
            <arg line="-doc-sources ${main.src.loc}"/>
            <arg line="-source-path ${main.src.loc}"/>
            <arg line="-output ${doc.loc}"/>
            <arg line="-window-title '${project.name}'"/>
            <arg line="-main-title '${project.name}'"/>
            <arg line="-footer '${project.name} - Documentation generated at: ${docgen.time}'"/>
        </java>

        <echo>[create-docs] ASDOC documentation generated successfully</echo>
    </target>

    <!-- Compile Release SWC -->
    <target name="compile-swc" depends="asdoc">
        <echo>[compile] Compiling release SWC</echo>
        <echo>[compile] Using Flex SDK at: ${FLEX_HOME}</echo>

        <java jar="${FLEX_HOME}/lib/compc.jar" maxmemory="512m" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <!-- Build our SWC with a versioned name. -->
            <arg value="-output=${bin.loc}/${project.name.versioned}.swc"/>

            <!-- We want all the org package classes in the SWC being built. -->
            <arg value="-include-sources=${main.src.loc}/"/>

            <!-- Include classes from SWCs in this folder, but only the ones we use. -->
            <arg value="-library-path+=${lib.loc}"/>

            <!-- Keep the magic alive. -->
            <arg value="-keep-as3-metadata+=Inject"/>

            <!-- Boolean mosh pit! -->
            <arg value="-incremental=true"/>
            <arg value="-static-link-runtime-shared-libraries=true"/>
            <arg value="-verbose-stacktraces=true"/>
            <arg value="-headless-server=true"/>
            <arg value="-include-libraries+=${lib.loc}"/>
        </java>

        <echo>[compile] Release SWC ${project.name.versioned}.swc created successfully</echo>
    </target>


    <target name="convert-swc-to-swf">
        <sequential>
        <unzip src="${bin.loc}/${project.name.versioned}.swc"
                 dest="${bin.loc}" >
              <patternset>
                      <include name="library.swf" />
              </patternset>
       </unzip>

       <move file="${bin.loc}/library.swf" tofile="${bin.loc}/${project.name.versioned}.swf"/>

       <antcall target="optimize-swf-lib"/>
       <antcall target="deploy-swf-lib"/>

       <delete file="${bin.loc}/library.swf"/>
       </sequential>
    </target>

    <target name="optimize-swf-lib" if="run.swflib.otimize">
        <java jar="${FLEX_HOME}/lib/optimizer.jar" fork="true" failonerror="true">
              <jvmarg line="-ea -DAS3 -DAVMPLUS -Dflexlib=${FLEX_HOME}/frameworks -Xms32m -Xmx384m -Dsun.io.useCanonCaches=false"/>
              <arg line="'${bin.loc}/${project.name.versioned}.swf' --output '${bin.loc}/${deploy.name.versioned}.swf' "/>
       </java>
    </target>

    <target name="deploy-swf-lib" if="run.swflib.deploy">
        <move file="${bin.loc}/${project.name.versioned}.swf" tofile="${lib.deploy.dir}/${deploy.name.versioned}.swf"/>
    </target>
    
</project>
